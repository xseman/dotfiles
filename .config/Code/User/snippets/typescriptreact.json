{
    "Storybook - Basic skeleton": {
        "prefix": "tsxstory",
        "description": "Storybook - Basic skeleton",
        "body": [
            "import { Meta, Story } from \"@storybook/react/types-6-0\";",
            "import base, { filename } from \"paths.macro\";",
            "import React from \"react\";",
            "",
            "interface Props {",
            "    hello: string;",
            "}",
            "",
            "function ${1:ExampleComponent}(props: Props) {",
            "    return <div>{props.hello}</div>;",
            "}",
            "",
            "export default {",
            "    // title: 'Hello world',                // custom, you have to mainstain",
            "    // title: base + Hello.name,            // function name, problematic on HoC components",
            "    // title: base + filename.split(\".\"), // filename with filetype",
            "    title: base + filename.split(\".\")[0], // filename without filetype",
            "    component: ${1:ExampleComponent},",
            "} as Meta;",
            "",
            "const Template: Story<Props> = (args) => <${1:ExampleComponent} {...args} />;",
            "",
            "export const hello = Template.bind({});",
            "hello.args = {",
            "    hello: \"Hello!\",",
            "};",
            "",
            "export const helloWorld = Template.bind({});",
            "helloWorld.args = {",
            "    hello: \"Hello world!\",",
            "};",
            ""
        ]
    },
    "React - SetState with prevState": {
        "prefix": "sss",
        "description": "Generates a setState function with a callback prevState.",
        "body": [
            "this.setState((state): State => ({}));"
        ]
    },
    "React - SetState with callback": {
        "prefix": "ssc",
        "description": "Generates a setState function with a callback.",
        "body": [
            "this.setState({}, () => {});"
        ]
    },
    "React - SetState": {
        "prefix": "ss",
        "description": "Generates a setState function.",
        "body": [
            "this.setState({});"
        ]
    },
    "React - JSX.Element with translation": {
        "prefix": "tsxel-i18",
        "description": "React - JSX.Element with translation",
        "body": [
            "import React from 'react';",
            "import { WithTranslation, withTranslation } from 'react-i18next';",
            "",
            "export interface Props extends WithTranslation {}",
            "",
            "function ${1:ComponentName}(props: Props): JSX.Element {",
            "    return (",
            "        <>",
            "            TODO",
            "        </>",
            "    );",
            "}",
            "",
            "export default withTranslation()(${1:ComponentName});",
            ""
        ]
    },
    "React - JSX.Element with Router": {
        "prefix": "tsxel-router",
        "description": "React - Class component with Router",
        "body": [
            "import React from 'react';",
            "import { RouteComponentProps, withRouter } from \"react-router-dom\";",
            "",
            "export interface Props extends RouteComponentProps {}",
            "",
            "function ${1:ComponentName}(props: Props): JSX.Element {",
            "    return (",
            "        <>",
            "            TODO",
            "        </>",
            "    );",
            "}",
            "",
            "export default withRouter(${1:ComponentName});",
            ""
        ]
    },
    "React - JSX.Element": {
        "prefix": "tsxel",
        "description": "React - JSX.Element",
        "body": [
            "import React from 'react';",
            "",
            "export interface Props {",
            "}",
            "",
            "function ${1:ComponentName}(props: Props): JSX.Element {",
            "    return (",
            "        <>",
            "            TODO",
            "        </>",
            "    );",
            "}",
            "",
            "export default ${1:ComponentName};",
            ""
        ]
    },
    "React - FC component": {
        "prefix": "tsxfc",
        "description": "React - FC component",
        "body": [
            "import React from 'react';",
            "",
            "export interface Props {}",
            "",
            "const ${1:ComponentName}: React.FC<Props> = (props) => {",
            "    return (",
            "        <>",
            "            Hello!",
            "        </>",
            "    );",
            "}",
            "",
            "export default ${1:ComponentName};",
            ""
        ]
    },
    "React - Class component with Translation and Router": {
        "prefix": "tsxcc-i18n-router",
        "description": "React - Class component with Translation and Router",
        "body": [
            "import React from 'react';",
            "import { WithTranslation, withTranslation } from 'react-i18next';",
            "import { RouteComponentProps, withRouter } from 'react-router-dom';",
            "",
            "export interface Props extends RouteComponentProps, WithTranslation {}",
            "export interface State {}",
            "",
            "class ${1:ComponentName} extends React.Component<Props, State> {",
            "    constructor(props: Props) {",
            "        super(props);",
            "        this.state = {};",
            "    }",
            "",
            "    componentDidMount() {",
            "        this._init();",
            "    }",
            "",
            "    componentWillUnmount() {",
            "        this._destroy();",
            "    }",
            "",
            "    render() {",
            "        return (",
            "            <>TODO</>",
            "        );",
            "    }",
            "",
            "    private _init(): void {}",
            "    private _destroy(): void {}",
            "}",
            "",
            "export default withRouter(withTranslation()(${1:ComponentName}));",
            ""
        ]
    },
    "React - Class component with Router": {
        "prefix": "tsxcc-router",
        "description": "React - Class component with Router",
        "body": [
            "import React from \"react\";",
            "import { RouteComponentProps, withRouter } from \"react-router-dom\";",
            "",
            "export interface Props extends RouteComponentProps {}",
            "export interface State {}",
            "",
            "class ${1:ComponentName} extends React.Component<Props, State> {",
            "    constructor(props: Props) {",
            "        super(props);",
            "        this.state = {};",
            "    }",
            "",
            "    componentDidMount() {",
            "        this._init();",
            "    }",
            "",
            "    componentWillUnmount() {",
            "        this._destroy();",
            "    }",
            "",
            "    render() {",
            "        return (",
            "            <>TODO</>",
            "        );",
            "    }",
            "",
            "    private _init(): void {}",
            "    private _destroy(): void {}",
            "}",
            "",
            "export default withRouter(${1:ComponentName});",
            ""
        ]
    },
    "React - Class component": {
        "prefix": "tsxcc",
        "description": "React - Class component",
        "body": [
            "import React from \"react\";",
            "",
            "export interface Props {}",
            "export interface State {}",
            "",
            "class ${1:ComponentName} extends React.Component<Props, State> {",
            "    constructor(props: Props) {",
            "        super(props);",
            "        this.state = {};",
            "    }",
            "",
            "    componentDidMount() {",
            "        this._init();",
            "    }",
            "",
            "    componentWillUnmount() {",
            "        this._destroy();",
            "    }",
            "",
            "    render() {",
            "        return (",
            "            <>TODO</>",
            "        );",
            "    }",
            "",
            "    private _init(): void {}",
            "    private _destroy(): void {}",
            "}",
            "",
            "export default ${1:ComponentName};",
            ""
        ]
    },
    "Function": {
        "prefix": "fn",
        "description": "Function",
        "body": [
            "function ${1:name}(arg: ${2:argType}): ${3:returnType} {",
            "    ${4:logic}",
            "}"
        ]
    }
}
